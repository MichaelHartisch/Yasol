/*
*
* Solver: Exceptions.hpp -- Copyright (c) 2010-2017 Jan Wolf
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the
* "Software"), to deal in the Software without restriction, including
* without limitation the rights to use, copy, modify, merge, publish,
* distribute, sublicense, and/or sell copies of the Software, and to
* permit persons to whom the Software is furnished to do so, subject to
* the following conditions:
*
* The above copyright notice and this permission notice shall be included
* in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#ifndef EXCEPTIONS_HPP_
#define EXCEPTIONS_HPP_

#include <exception>
#include <string>

namespace utils {
/** Generic Exception with Error message */
class QlpSolverException: public std::exception {
public:
	/** Default Constructor */
	QlpSolverException() :
		message() {
	}
	/** Constructor that takes error string */
	QlpSolverException(std::string m) :
		message(m) {
		utils::Logger::globalLog(utils::LOG_ERROR, "QlpSolverException", m);
	}
	/** Default destructor */
	virtual ~QlpSolverException() throw () {
	}
	/** Overrides what() method from std::exception */
	const char* what() const throw () {
		return message.c_str();
	}
protected:
	std::string message;
};

class ParserException: public QlpSolverException {
public:
	ParserException(std::string m) :
		QlpSolverException(m) {
	}
	const char* what() const throw () {
		return ("Exception while parsing: " + message).c_str();
	}
};

class DataStructureException: public QlpSolverException {
public:
	DataStructureException(std::string m) :
		QlpSolverException(m) {
	}
	const char* what() const throw () {
		return ("Exception in Datastructure: " + message).c_str();
	}
};

class AlgorithmException: public QlpSolverException {
public:
	AlgorithmException(std::string m) :
		QlpSolverException(m) {
	}
	const char* what() const throw () {
		return ("Exception in Algorithm: " + message).c_str();
	}
};

class ExternSolverException: public QlpSolverException {
public:
	ExternSolverException(std::string m) :
		QlpSolverException(m) {
	}
	const char* what() const throw () {
		return ("Exception in ExternSolver: " + message).c_str();
	}
};

}

#endif /* EXCEPTIONS_HPP_ */
